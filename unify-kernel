#!/bin/env python3
# Derived from safeboot unify-kernel
# Creates a unified kernel image with the named sections and files
# (typically `kernel`, `initrd`, `cmdline`, and `osrel`) bundled into
# an EFI executable.
# 
# '

import sys
import os
import re
import subprocess

verbose = 0

def unify(
	output_filename,
	sections,
	offset = None,
	align = None,
	stub = None,
	objcopy = None,
):
	if stub is None:
		stub = "/usr/lib/systemd/boot/efi/linuxx64.efi.stub"
	if offset is None:
		offset = 0x20000
	if align is None:
		align = 0x10000
	if objcopy is None:
		objcopy = "objcopy"

	if verbose:
		print(f"stub {stub}", file=sys.stderr)

	section_args = []
	for s in sections:
		g = re.match(r"(.*)=(.*)$", s)
		if not g:
			print("unable to parse section", s, file=sys.stderr)
			return False

		secname = g[1]
		filename = g[2]
		with open(filename, "rb") as f:
			size = len(f.read())

		if verbose:
			print(secname, filename, size, "0x%x" % (offset), file=sys.stderr)

		section_args += [
			"--add-section", f".{secname}={filename}",
			"--change-section-vma", f".{secname}={offset}",
		]

		# increase the offset, rounding to the block size
		offset = (offset + size + align - 1) // align * align

#	if verbose:
#		print(section_args, file=sys.stderr)
	rc = subprocess.run([
		objcopy,
		*section_args,
		stub,
		output_filename,
	])

	if rc.returncode != 0:
		print(f"{output_filename}: objcopy failed", file=sys.stderr)
		return False

	subprocess.run(["sha256sum", output_filename])
	return True

if __name__ == "__main__":
	import argparse

	parser = argparse.ArgumentParser(
		formatter_class=argparse.RawDescriptionHelpFormatter,
		epilog = """
The normal list of sections for a Linux unified kernel image is:

  linux=bzImage \\
  initrd=initrd.cpio.xz \\
  cmdline=cmdline.txt

For a Xen unified hypervisor the xen.efi file is used as the stub
and the sections are:

  kernel=bzImage \\
  ramdisk=initrd.cpio.xz \\
  config=xen.cfg \\
  ucode=ucode.bin \\
  xsm=xsm.cfg

The resulting output file can be signed with sbsign or other tools.
""",
	)

	parser.add_argument('-v', '--verbose',
		action="count",
		help = "Increase verbosity",
	)

	parser.add_argument('-o', '--output',
		default = 'unified.efi',
		help = "Destination for the unified kernel image",
	)

	parser.add_argument('--stub',
		help = "Path to systemd efi stub executable",
		nargs = 1,
	)

	parser.add_argument('--offset',
		nargs = 1,
		type = int,
		help = "Offset in the executable to start adding sections",
	)

	parser.add_argument('--align',
		nargs = 1,
		type = int,
		help = "Alignment for each section",
	)

	parser.add_argument('--objcopy',
		help = "Path to objcopy executable",
		nargs = 1,
	)


	parser.add_argument("sections",
		help = "List of sections as name=path-to-file",
		nargs = '+',
	)

	args = parser.parse_args(sys.argv[1:])

	verbose = args.verbose
	if unify(
		args.output,
		sections=args.sections,
		offset=args.offset,
		align=args.align,
		stub=args.stub,
		objcopy=args.objcopy,
	):
		sys.exit(0)
	else:
		sys.exit(-1)

#!/usr/bin/python3
# Build a Linux kernel based on a config file
# This can also be applied to other KConfig tools and some Makefile tools
import argparse
import os
import sys
import subprocess
import hashlib
import shlex
from tempfile import NamedTemporaryFile

verbose = 1

def system(*s, cwd=None):
	# do not close file descriptors, which will allow
	# communication from sub-make invocations to the make
	# that invoked us
	if verbose:
		print(s)
	subprocess.run(s, check=True, close_fds=False, cwd=cwd)
def die(*s):
	print(*s, file=sys.stderr)
	exit(1)
def info(s):
	if verbose > 0:
		print(s, file=sys.stderr)
def debug(s):
	if verbose > 1:
		print(s, file=sys.stderr)
def exists(f):
	try:
		os.stat(f)
		return True
	except Exception as e:
		return False
def readfile(filename):
	with open(filename, "rb") as f:
		data = f.read()
	data_hash = hashlib.sha256(data).hexdigest()
	return (data, data_hash)
def writefile(filename, data):
	with open(filename, "wb") as f:
		f.write(data)

# allow $MAKE to be overridden in the environment, which
# will inherit from Makefiles.  Note that it is split
# into separate words so that the shell is not invoked
# on sub-make builds
make = os.getenv("MAKE")
if not make:
	make = "make"

parser = argparse.ArgumentParser()
parser.add_argument('-O', '--output-dir',
	dest='output', type=str,
	default='build',
	help="Directory for Linux source and builds")
parser.add_argument('-T', '--tag',
	dest='tag', type=str,
	default=None,
	help="Short name for the build (default inferred from config file)")
parser.add_argument('-V', '--version',
	dest='version', type=str,
	default='5.4.117',
	help="Linux kernel version to build")
parser.add_argument( '-v', '--verbose',
	dest='verbose', action='count', default=0,
	help="Verbose build")
parser.add_argument( '-s', '--silent',
	dest='verbose', action='store_const', const=0,
	help="Verbose build (add more for more verbosity)")
parser.add_argument( '-m', '--menuconfig',
	dest='menuconfig', action='store_true',
	help="Run menuconfig on the config file")
parser.add_argument('--clean',
	dest='clean', action='store_true',
	help="Clean the build directory and source directory")
parser.add_argument('-c', '--config',
	dest='config', type=str,
	default=None,
	required=True,
	help="Linux kernel config file (required)")
parser.add_argument('-p', '--patch',
	dest='patches', type=str, action='append',
	default=None,
	help="Linux kernel patch file (optional, can be multiple)")
parser.add_argument('--hash',
	dest='hash', type=str,
	default=None,
	help="sha256 hash of the kernel source file")
parser.add_argument( '-M', '--make',
	dest='make', type=str,
	default=make,
	help="Override the $(MAKE) environment variable")
parser.add_argument( '-j', '--jobs',
	dest='make_jobs', type=int,
	default=None,
	help="Number of parallel make jobs to invoke")
parser.add_argument( '-H', '--hostname',
	dest='hostname', type=str,
	default=None,
	help="Override the default hostname in the linux config")
parser.add_argument( '-C', '--cmdline',
	dest='cmdline', type=str,
	default=None,
	help="Override the default kernel command line in the linux config")
parser.add_argument( '-I', '--initrd',
	dest='initrd', type=str,
	default=None,
	help="Override the default initrd in the linux config")
parser.add_argument( '-U', '--uncompressed',
	dest='initrd_uncompressed', action='store_true',
	default=False,
	help="Do not compress the initrd for faster boot")
parser.add_argument( '-L', '--link',
	dest='symlinks', action='append',
	default=[],
	help="Symlinks to add to the build tree for external code dir=../real")
parser.add_argument('--configure',
	dest='configure', type=str,
	default=None,
	help="Override the default Linux kernel oldconfig command (will be run in output directory")
parser.add_argument('--url',
	dest='url', type=str,
	default=None,
	help="Override the default Linux kernel URL path")
parser.add_argument('-N', '--name',
	dest='name', type=str,
	default='linux',
	help="Override the default Linux prefix for directory names")
parser.add_argument('--no-kernel',
	dest='no_kernel', action='store_true',
	default=False,
	help="Do not try to extract the vmlinux")

args = parser.parse_args()
version = args.version
verbose = args.verbose
config_file = args.config
patch_files = args.patches
output_dir = args.output
make_jobs = args.make_jobs
kernel_hash = args.hash

# split it into words following shell semantics
make = shlex.split(make)

# ensure that the config exists,
# TODO: unless this is a menuconfig which might be creating from scratch
if not exists(config_file):
	die(config_file + ": config file does not exist?")

# Read the base configuration (may be updated later)
# TODO: handle non-existant file for menuconfig
(config, config_hash) = readfile(config_file)

major = version.split('.')[0]
tag = args.tag
if not tag:
	tag = os.path.splitext(os.path.basename(config_file))[0]
patch_tag = ''
patches = []
if patch_files:
	patch_data = b''
	for patch_file in patch_files:
		if not exists(patch_file):
			die(patch_file + ": patch file does not exist?")
		(data, file_hash) = readfile(patch_file)
		patches.append([patch_file, data])
		patch_data += data
	# compute the hash over all of the patches in order
	# and use the short form for the directory name
	patch_hash = hashlib.sha256(data).hexdigest()
	patch_tag = "-" + patch_hash[0:8]

prefix = args.name + "-"

if args.url:
	linux_url = args.url
else:
	linux_url_base = "https://cdn.kernel.org/pub/linux/kernel/v%s.x/linux-%s" % (major, version)
	linux_url = linux_url_base + ".tar.xz"
	linux_sig = linux_url_base + ".tar.sign"
linux_tar = os.path.join(output_dir, prefix + version + ".tar.xz")
linux_dir = os.path.join(output_dir, prefix + version + patch_tag)
build_dir = os.path.join(output_dir, prefix + version + "-" + tag)
build_rdir = os.path.join("..", prefix + version + "-" + tag)
kconfig_file = os.path.join(build_dir, ".config")
kernel_file = os.path.join(output_dir, "vmlinuz-" + tag)

if verbose > 1:
	print("URL     = " + linux_url)
	print("source  = " + linux_dir)
	print("build   = " + build_dir)
	print("kconfig = " + kconfig_file)
	print("tag     = " + tag)
	if kernel_hash is not None:
		print("hash    = " + kernel_hash)

if args.clean:
	print("Removing " + linux_dir + " and " + build_dir, file=sys.stderr)
	system("rm", "-rf", linux_dir, build_dir)
	exit(0)

unpack_canary = os.path.join(linux_dir, ".unpacked")
patch_canary = os.path.join(linux_dir, ".patched")
symlink_canary = os.path.join(linux_dir, ".symlinks")
config_canary = os.path.join(build_dir, ".configured")

if not os.path.exists(build_dir):
	info("Creating build dir " + build_dir)
	os.makedirs(build_dir, exist_ok=True)

if not exists(linux_tar):
	info(linux_url + ": fetching")
	tmpfile = linux_tar + ".tmp"
	system("wget", "-O", tmpfile, linux_url)
	if kernel_hash is not None:
		(data,actual_hash) = readfile(tmpfile)
		if actual_hash != kernel_hash:
			die(linux_tar + ": " + actual_hash + " != expected " + kernel_hash)
	system("mv", tmpfile, linux_tar)

if not exists(unpack_canary):
	info(linux_tar + ": unpacking into " + linux_dir)
	os.makedirs(linux_dir, exist_ok=True)
	system("tar",
		"-xf", linux_tar,
		"-C", linux_dir,
		"--strip-components", "1",
	)

	writefile(unpack_canary, b'')

if len(patches) != 0:
	if exists(patch_canary):
		(oldpatch_hash,hashhash) = readfile(patch_canary)
		if oldpatch_hash != patch_hash.encode('utf-8'):
			die(patch_file + ": wrong patch applied! delete source directory " + linux_dir + " and try again", patch_hash, oldpatch_hash)
	else:
		for patch in patches:
			# since patch chdir into the linux_dir,
			# we need an absolute path to the patch
			info(patch[0] + ": applying patch to " + linux_dir)
			with NamedTemporaryFile() as tmp:
				tmp.write(patch[1])
				tmp.flush()
				system("patch",
					"--input", tmp.name,
					"--directory", linux_dir,
					"-p1",
				)
		writefile(patch_canary, patch_hash.encode('utf-8'))

if not exists(symlink_canary):
	for symlink in args.symlinks:
		(src,dest) = symlink.split('=')
		src = os.path.join(linux_dir, src)
		info("symlink " + src + " => " + dest)
		system("ln", "-s", dest, src)
	writefile(symlink_canary, b'')

if args.menuconfig:
	# just in case this is the very first time, allow an empty config file
	# and pre-create the directory
	# re-write the config with the unmodified version
	writefile(kconfig_file, config)
	system(*make,
		"-j1",
		"-C", linux_dir,
		"O=" + build_rdir,
		"menuconfig",
		"savedefconfig"
	)
	system("cp",
		os.path.join(build_dir,"defconfig"),
		config_file,
	)
	exit(0)

# Update the config with any overrides and recompute the hash
if args.hostname is not None:
	hostname = args.hostname.encode('utf-8')
	config += b'CONFIG_DEFAULT_HOSTNAME="' + hostname + b'"\n'
if args.initrd is not None:
	# the initrd might be a relative path to the invocation,
	# so make it absolute since the kernel will be built with make -C
	initrd = os.path.abspath(args.initrd).encode('utf-8')
	config += b'CONFIG_INITRAMFS_SOURCE="' + initrd + b'"\n'
if args.initrd_uncompressed:
	# boots about 2 seconds faster
	config += b'CONFIG_INITRAMFS_COMPRESSION_NONE=y\n'
if args.cmdline is not None:
	cmdline = args.cmdline.encode('utf-8')
	config += b'CONFIG_CMDLINE_BOOL=y\n'
	config += b'CONFIG_CMDLINE="' + cmdline + b'"\n'

# recompute the hash
config_hash = hashlib.sha256(config).hexdigest()

# check to see if we need to reconfigure
reconfig = False
if exists(config_canary):
	# check to see if the parameters are the same
	(oldconfig_hash,hashhash) = readfile(config_canary)
	if os.stat(config_canary).st_mtime < os.stat(config_file).st_mtime:
		# they have touched the local config, force a reconfig
		reconfig = True
	if oldconfig_hash != config_hash.encode('utf-8'):
		reconfig = True
else:
	# no canary, force a reconfiguration
	reconfig = True


# export some variables
os.environ['O'] = build_rdir

if reconfig:
	info(kconfig_file + ": rebuilding kernel config")
	os.makedirs(build_dir, exist_ok=True)
	writefile(kconfig_file, config)

	if args.configure is None:
		system(*make,
			"-j1",
			"-C", linux_dir,
			"O=" + build_rdir,
			"olddefconfig"
		)
	else:
		system(
			args.configure,
			cwd=linux_dir
		)

	writefile(config_canary, config_hash.encode('utf-8'))

	
# finally ready to build! (in the build dir)
make_cmd = [ *make,
	"KBUILD_HOST=builder",
	"KBUILD_BUILD_USER=builder",
	"KBUILD_BUILD_TIMESTAMP=" + config_hash,
	"KBUILD_BUILD_VERSION=" + tag + patch_tag,
	"-C", build_dir,
	#"O=" + build_rdir,
]

if make_jobs:
	make_cmd.append("-j" + str(make_jobs))
if verbose > 3:
	make_cmd.append("V=1")

info(build_dir + ": starting build")
debug(make_cmd)

system(*make_cmd)

if args.no_kernel:
	sys.exit(0)

(kernel, kernel_hash) = readfile(os.path.join(build_dir, "arch", "x86", "boot", "bzImage"))

writefile(kernel_file, kernel)

if verbose > 0:
	print("%s: %s" % (kernel_file, kernel_hash))
